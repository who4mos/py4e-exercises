* Write a while loop that starts at the last character in the string and works its way backwards to the first character in the string, printing each letter on a separate line, except backwards.

#+begin_src python
  string = input("Enter some text: ")

  index = len(string) - 1

  while index >= 0:
      print(string[index])
      index -= 1
#+end_src

* Given that fruit is a string, what does fruit[:] mean?

~fruit[:]~ returns a new string with the same characters as ~fruit~, but they're not the same object.

* Encapsulate this code in a function named count, and generalize it so that it accepts the string and the letter as arguments.

#+begin_src python
  def count(string, char):
    counter = 0

    for letter in string:
	if letter == char:
	  counter += 1

    return counter
#+end_src

* There is a string method called ~count~ that is similar to the function in the previous exercise. Read the documentation of this method at:

[[https://docs.python.org/library/stdtypes.html#string-methods]]

Write an invocation that counts the number of times the letter a occurs in “banana”.

#+begin_src python
  print("banana".count('a'))
#+end_src

* Take the following Python code that stores a string:

#+begin_src python
  string = 'X-DSPAM-Confidence:0.8475'
#+end_src

Use ~find~ and string slicing to extract the portion of the string after the colon character and then use the float function to  convert the extracted string into a floating point number.

#+begin_src python
  def extract_number(s):
      colon_index = s.find(':')

      try:
	  n = float(s[colon_index+1:])
      except:
	  print("No number after colon.")
	  exit()

      return n

  string = 'X-DSPAM-Confidence:0.8475'
  number = extract_number(string)

  print(number, type(number))
#+end_src
