* Write a function called chop that takes a list and modifies it, removing the first and last elements, and returns None. Then write a function called middle that takes a list and returns a new list that contains all but the first and last elements.

#+begin_src python
  def chop(l: list):
	l.pop()
	l.pop(0)

  def middle(l):
	return l[1:-1]
#+end_src
* Figure out which line of the program is still not properly guarded. See if you can construct a text file which causes the program to fail and then modify the program so that the line is properly guarded and test it to make sure it handles your new text file.

#+begin_src python
  fhand = open('mbox-short.txt')
  count = 0
  for line in fhand:
      words = line.split()
      # print('Debug:', words)
      if len(words) == 0 : continue
      if words[0] != 'From' : continue
      print(words[2])
#+end_src

Before printing the 3rd element of the ~words~ variable, we should check if there is a 3rd  element:

#+begin_src python
  ...
  if len(words) < 3: continue
  if words[0] != 'From' : continue
#+end_src
* Rewrite the guardian code in the above example without two if statements. Instead, use a compound logical expression using the or logical operator with a single if statement.

#+begin_src python
  if len(words) < 3 or words[0] != "From": continue
#+end_src

* Find all unique words in a file

#+begin_src python
  fname = input("File name: ")
  uniques = []

  try:
      fhandle = open(fname)
  except:
      print(f"File cannot be opened: {fname}")
      exit()

  for line in fhandle:
      words = line.split()
      for word in words:
	  if word not in uniques:
	      uniques.append(word)

  print(sorted(uniques))
#+end_src

* Minimalist Email Client

#+begin_src python
  fname = input("File name: ")
  emails = []


  try:
      fhandle = open(fname)
  except:
      print(f"File cannot be opened: {fname}")
      exit()


  for line in fhandle:
      if line.startswith("From"):
	  words = line.split()
	  if len(words) < 2:
	      print("Invalid Line")
	  else:
	      print(words[1])
	      emails.append(words[1])

  print(f"There were {len(emails)} lines in the file with From \
  as the first word")
#+end_src

* Rewrite the program that prompts the user for a list of numbers and prints out the maximum and minimum of the numbers at the end when the user enters “done”. Write the program to store the numbers the user enters in a list and use the max() and min() functions to compute the maximum and minimum numbers after the loop completes.

#+begin_src python
  answer = ""
  numbers = []

  while answer.lower() != "done":
      answer = input("Enter a number: ")
      try:
	  num =  float(answer)
	  numbers.append(num)
      except:
	  print("Invalid Input!")

  print(f"Maximum: {max(numbers)}")
  print(f"Minimum: {min(numbers)}")
#+end_src
